/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Apr 12 2018 12:02:53 GMT-0500 (CDT).
 */

define(['text!./ModelManagerView.html', 'css!./styles/ModelManagerWidget.css'], function (ModelManagerView) {
    'use strict';

    var ModelManagerWidget,
        WIDGET_CLASS = 'model-manager',
        BASE_WIDGET_FRAME = '<div class="col-sm-12">\n' +
            '    <div id="toolbarBtns" class="col-sm-offset-2">\n' +
            '    </div>\n' +
            '    <div class="col-sm-12">\n' +
            '      <table class="table"><thead><tr><th>Name</th><th>Type</th><th></th></tr></thead>\n' +
            '        <tbody id="modelList"></tbody>\n' +
            '      </table>\n' +
            '    </div>\n' +
            '</div>',
        SINGLE_CREATE_BUTTON = '<button id="createBtn" type="button" class="btn btn-danger">Create a new</button>',
        IMPORT_BUTTON = '<button id="importBtn" type="button" class="btn btn-primary">Import</button>',
        DROPDOWN_CREATE_BUTTON = '<div class="btn-group">\n' +
            '            <button type="button"\n' +
            '                    class="btn btn-danger dropdown-toggle"\n' +
            '                    data-toggle="dropdown"\n' +
            '                    aria-haspopup="true"\n' +
            '                    aria-expanded="false">Create a new <span class="caret"></span>\n' +
            '            </button>\n' +
            '            <ul class="dropdown-menu" id="createBtnList">\n' +
            '                <!-- <li><a href="#">Action</a></li>\n' +
            '                <li><a href="#">Another action</a></li>\n' +
            '                <li><a href="#">Something else here</a></li>\n' +
            '                <li role="separator" class="divider"></li>\n' +
            '                <li><a href="#">Separated link</a></li> !-->\n' +
            '            </ul>\n' +
            '        </div>';

    ModelManagerWidget = function (logger, container, options) {
        this._logger = logger.fork('Widget');

        this._el = container;
        this._initialize(options);

        this._logger.debug('ctor finished');
    };

    ModelManagerWidget.prototype._initialize = function (options) {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        if (options.inFault) {
            this._el.append('<h3>Cannot work without proper configuration!</h3>');
            return;
        } else {
            this._el.append(BASE_WIDGET_FRAME);
            this._toolbar = $(this._el).find('#toolbarBtns');

            if (options.types.length === 1) {
                this._toolbar.append(SINGLE_CREATE_BUTTON);
                this._createBtn = $(this._toolbar).find('#createBtn');
                this._createBtn.click(function () {
                    self.onNewModel(options.types[0]);
                });
                this._createBtn.empty();
                this._createBtn.append('Create a new ' + options.types[0]);
            } else {
                this._toolbar.append(DROPDOWN_CREATE_BUTTON);
                this._createBtn = this._toolbar.find('#createBtnList');
                options.types.forEach(function (type, index) {
                    self._createBtn.append('<li id="createBtn' + index + '"><a href="#">' + type + '</a></li>');
                    self._createBtn.find('#createBtn' + index).click(function () {
                        self.onNewModel(options.types[index]);
                    });
                })
            }

            this._toolbar.append(IMPORT_BUTTON);
            this._importBtn = $(this._toolbar).find('#importBtn');
            this._importBtn.click(function () {
                self.onImport();
            });

            this._list = $(this._el).find('#modelList');
        }
    };

    ModelManagerWidget.prototype.updateModelList = function (models) {
        var self = this;
        self._list.empty();
        models.forEach(function (model, index) {
            var elementStr = '<tr><td>';

            elementStr += model.name;
            elementStr += '</td><td>';
            elementStr += model.type;
            elementStr += '</td><td>';
            elementStr += '<button type="button" id="' + index + '_viewBtn" class="btn btn-primary">View</button>';
            elementStr += '<button type="button" id="' + index + '_exportBtn" class="btn btn-info">Export</button>';
            elementStr += '<button type="button" id="' + index + '_deleteBtn" class="btn btn-danger">Delete</button>';
            elementStr += '</td></tr>';

            $(self._list).append(elementStr);
            $(self._list).find('#' + index + '_viewBtn').click(function () {
                console.log('yeah, I am going to view :', model.path);
            });
            $(self._list).find('#' + index + '_exportBtn').click(function () {
                console.log('yeah, I am going to export :', model.path);
            });
            $(self._list).find('#' + index + '_deleteBtn').click(function () {
                console.log('yeah, I am going to remove :', model.path);
            });
        });
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    ModelManagerWidget.prototype.onNewModel = function (/*typeName*/) {
        this._logger.warn('Event function \'onNewModel\' should be overriden.');
    };

    ModelManagerWidget.prototype.onImport = function () {
        this._logger.warn('Event function \'onImport\' should be overriden.');
    };

    ModelManagerWidget.prototype.onExport = function () {
        this._logger.warn('Event function \'onExport\' should be overriden.');
    };

    ModelManagerWidget.prototype.onView = function (/*modelPath*/) {
        this._logger.warn('Event function \'onView\' should be overriden.');
    };

    ModelManagerWidget.prototype.onDelete = function (/*modelPath*/) {
        this._logger.warn('Event function \'onDelete\' should be overriden.');
    };

    ModelManagerWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._el.width(width);
        this._el.height(height);
        this._logger.debug('Widget is resizing...');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ModelManagerWidget.prototype.destroy = function () {
    };

    ModelManagerWidget.prototype.onActivate = function () {
        this._logger.debug('ModelManagerWidget has been activated');
    };

    ModelManagerWidget.prototype.onDeactivate = function () {
        this._logger.debug('ModelManagerWidget has been deactivated');
    };

    return ModelManagerWidget;
});
