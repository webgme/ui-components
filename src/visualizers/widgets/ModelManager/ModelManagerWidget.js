/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Apr 12 2018 12:02:53 GMT-0500 (CDT).
 */

define(['css!./styles/ModelManagerWidget.css'], function () {
    'use strict';

    var ModelManagerWidget,
        WIDGET_CLASS = 'model-manager',
        BASE_WIDGET_FRAME = `
            <div class="col-sm-12">
                <div id="toolbarBtns">
                </div>
                <div class="col-sm-12">
                    <table class="table"><thead><tr><th>Name</th><th>Type</th><th> </th></tr></thead>
                        <tbody id="modelList"></tbody>
                    </table>
                </div>
            </div>`,
        SINGLE_CREATE_BUTTON = '<button id="createBtn" type="button" class="btn btn-primary">Create a new</button>',
        IMPORT_BUTTON = '<button id="importBtn" type="button" class="btn btn-default">Import</button>',
        DROPDOWN_CREATE_BUTTON = `
            <div class="btn-group">
                <button type="button" 
                    class="btn btn-primary dropdown-toggle"
                    data-toggle="dropdown"
                    aria-haspopup="true"
                    aria-expanded="false">Create a new <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" id="createBtnList"></ul>
            </div>`;

    ModelManagerWidget = function (logger, container, options) {
        var self = this;
        this._logger = logger.fork('Widget');

        this._el = container;
        this._client = options.client;
        this._config = options.config || {};
        this._initialized = false;

        this._initialize();

        this._checkComponentSettings(function (useDefault) {
            if (useDefault) {
                self._config = self._defaultConfig;
                self._types = self._defaultTypes;
            }
            self._fillInitialContent();
            self._initialized = true;
            self.onInitialized(self._config);
            if (self._models) {
                self.updateModelList(self._models);
                delete self._models;
            }
            self._logger.debug('ctor finished');
        });

    };

    ModelManagerWidget.prototype._initialize = function () {
        var self = this;
        this._el.addClass(WIDGET_CLASS);

        //build the default config
        this._defaultConfig = {container: '', types: []};
        this._defaultTypes = {};
        var metaNodes = this._client.getAllMetaNodes(true),
            keys = Object.keys(metaNodes);

        keys.forEach(function (metaPath) {
            var name = metaNodes[metaPath].getAttribute('name');
            self._defaultConfig.types.push(name);
            self._defaultTypes[name] = metaPath;
        });
    };


    ModelManagerWidget.prototype._checkComponentSettings = function (callback) {
        var self = this,
            metaNodes,
            root,
            core;

        self._types = {};
        self._client.getCoreInstance(null, function (err, result) {
            var missing,
                paths;

            if (self._config.types instanceof Array !== true) {
                callback(true);
            } else if (err) {
                self._logger.error('Unable to verify component settings:', err);
                self._config.inFault = true;
                callback(true);
            } else {
                missing = self._config.types.length;
                core = result.core;
                root = result.rootNode;
                metaNodes = core.getAllMetaNodes(root);
                paths = Object.keys(metaNodes);

                paths.forEach(function (metaPath) {
                    if (self._config.types.indexOf(core.getAttribute(metaNodes[metaPath], 'name')) !== -1) {
                        missing -= 1;
                        self._types[core.getAttribute(metaNodes[metaPath], 'name')] = metaPath;
                    }
                });

                if (missing !== 0) {
                    self._logger.warn('Incompatible component setting:', self._config);
                    callback(true);
                } else {
                    core.loadByPath(root, self._config.container, function (err/*,node*/) {
                        var useDefault = false;
                        if (err) {
                            self._logger.error('Invalid component setting - no such container:', err);
                            useDefault = true;
                        } else {
                            self._logger.info('ModelManagerPanel component setting is compatible with the project.');
                        }
                        callback(useDefault);
                    });
                }
            }
        });
    };

    ModelManagerWidget.prototype._fillInitialContent = function () {
        var self = this;

        self._el.append(BASE_WIDGET_FRAME);
        self._toolbar = $(this._el).find('#toolbarBtns');

        if (self._config.types.length === 1) {
            self._toolbar.append(SINGLE_CREATE_BUTTON);
            self._createBtn = $(this._toolbar).find('#createBtn');
            self._createBtn.click(function () {
                self.onNewModel(self._config.types[0], self._types[self._config.types[0]]);
            });
            self._createBtn.empty();
            self._createBtn.append('Create a new ' + self._config.types[0]);
        } else {
            self._toolbar.append(DROPDOWN_CREATE_BUTTON);
            self._createBtn = this._toolbar.find('#createBtnList');
            self._config.types.forEach(function (type, index) {
                self._createBtn.append('<li id="createBtn' + index + '"><a href="#">' + type + '</a></li>');
                self._createBtn.find('#createBtn' + index).click(function () {
                    self.onNewModel(self._config.types[index], self._types[self._config.types[index]]);
                });
            })
        }

        self._toolbar.append(IMPORT_BUTTON);
        self._importBtn = $(this._toolbar).find('#importBtn');
        self._importBtn.click(function () {
            self.onImport();
        });

        self._list = $(this._el).find('#modelList');
    };

    ModelManagerWidget.prototype.updateModelList = function (models) {
        var self = this;

        if (self._initialized !== true) {
            self._models = models;
            return;
        }

        self._list.empty();
        models.forEach(function (model, index) {
            var elementStr = '<tr><td>';

            elementStr += model.name;
            elementStr += '</td><td>';
            elementStr += model.type;
            elementStr += '</td><td>';
            elementStr += '<button type="button" id="' + index + '_viewBtn" class="btn btn-primary">View</button>';
            elementStr += '<button type="button" id="' + index + '_exportBtn" class="btn btn-info">Export</button>';
            elementStr += '<button type="button" id="' + index + '_deleteBtn" class="btn btn-danger">Delete</button>';
            elementStr += '</td></tr>';

            $(self._list).append(elementStr);
            $(self._list).find('#' + index + '_viewBtn').click(function () {
                self.onView(model.path);
            });
            $(self._list).find('#' + index + '_exportBtn').click(function () {
                self.onExport(model.path);
            });
            $(self._list).find('#' + index + '_deleteBtn').click(function () {
                self.onDelete(model.path);
            });
        });
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    ModelManagerWidget.prototype.onInitialized = function (/*config*/) {
        this._logger.warn('Event function \'onInitialized\' should be overriden.');
    };
    ModelManagerWidget.prototype.onNewModel = function (/*typeName*/) {
        this._logger.warn('Event function \'onNewModel\' should be overriden.');
    };

    ModelManagerWidget.prototype.onImport = function () {
        this._logger.warn('Event function \'onImport\' should be overriden.');
    };

    ModelManagerWidget.prototype.onExport = function () {
        this._logger.warn('Event function \'onExport\' should be overriden.');
    };

    ModelManagerWidget.prototype.onView = function (/*modelPath*/) {
        this._logger.warn('Event function \'onView\' should be overriden.');
    };

    ModelManagerWidget.prototype.onDelete = function (/*modelPath*/) {
        this._logger.warn('Event function \'onDelete\' should be overriden.');
    };

    ModelManagerWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._el.width(width);
        this._el.height(height);
        this._logger.debug('Widget is resizing...');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ModelManagerWidget.prototype.destroy = function () {
    };

    ModelManagerWidget.prototype.onActivate = function () {
        this._logger.debug('ModelManagerWidget has been activated');
    };

    ModelManagerWidget.prototype.onDeactivate = function () {
        this._logger.debug('ModelManagerWidget has been deactivated');
    };

    return ModelManagerWidget;
});
