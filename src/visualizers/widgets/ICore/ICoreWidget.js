/*globals define, WebGMEGlobal, $*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Nov 30 2016 10:36:41 GMT-0600 (Central Standard Time).
 */

define([
    'codemirror/lib/codemirror',
    'jquery',
    'css!codemirror/lib/codemirror.css',
    'css!./styles/ICoreWidget.css'
], function (codeMirror) {
    'use strict';

    var ICoreWidget,
        WIDGET_CLASS = 'i-core-widget';

    ICoreWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this._initialize();

        this._logger.debug('ctor finished');
    };

    ICoreWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this,
            codeEditorOptions = {
                value: '',
                mode: 'javascript',
                lineNumbers: true,
                matchBrackets: true,
                tabSize: 2,
                gutters: ['CodeMirror-linenumbers']
            },
            consoleWindowOptions = {
                value: '',
                readOnly: true
            };

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._codeEditor = codeMirror(this._el[0], codeEditorOptions);
        // There is probably something more fancy to use here..
        this._consoleWindow = codeMirror(this._el[0], consoleWindowOptions);
        this._consoleStr = '';
    };

    // Adding/Removing/Updating items
    ICoreWidget.prototype.addNode = function (desc) {
        if (typeof desc.scriptCode === 'string') {
            this._codeEditor.setValue(desc.scriptCode);
        } else {
            this._codeEditor.setValue("// No scriptCode attribute defined. Changes will not be persisted\nfunction (callback) {\n \tvar activeNode = this.activeNode,\n      core = this.core,\n      logger = this.logger;\n  \n  logger.info('Current node name:', core.getAttribute(activeNode, 'name'));\n}");
        }

        this._codeEditor.refresh();
    };

    ICoreWidget.prototype.removeNode = function (gmeId) {
        this._codeEditor.setValue('// Node was removed');
    };

    ICoreWidget.prototype.updateNode = function (desc) {
        if (typeof desc.scriptCode === 'string' && desc.scriptCode !== this._codeEditor.getValue()) {
            this._codeEditor.setValue(desc.scriptCode);
        }
    };

    ICoreWidget.prototype.getCode = function () {
        return this._codeEditor.getValue();
    };

    ICoreWidget.prototype.addConsoleMessage = function (level, logPieces) {
        var scrollInfo;

        this._consoleStr += '\n ' + level + ':  ' + logPieces.map(function (arg) {
                return typeof arg === 'string' ? arg : JSON.stringify(arg);
            }).join(' ');

        this._consoleWindow.setValue(this._consoleStr);

        scrollInfo = this._consoleWindow.getScrollInfo();

        this._consoleWindow.scrollTo(scrollInfo.left, scrollInfo.height);
    };

    ICoreWidget.prototype.clearConsole = function () {
        this._consoleStr = '';
        this._consoleWindow.setValue(this._consoleStr);
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ICoreWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    ICoreWidget.prototype.destroy = function () {
        
    };

    ICoreWidget.prototype.onActivate = function () {
        this._logger.debug('ICoreWidget has been activated');
    };

    ICoreWidget.prototype.onDeactivate = function () {
        this._logger.debug('ICoreWidget has been deactivated');
    };

    return ICoreWidget;
});
