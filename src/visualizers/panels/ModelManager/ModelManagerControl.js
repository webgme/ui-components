/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Apr 12 2018 12:02:53 GMT-0500 (CDT).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/Utils/Exporters',
    'js/NodePropertyNames',
    'js/Dialogs/ImportModel/ImportModelDialog',
    'js/Dialogs/Confirm/ConfirmDialog'
], function (
    CONSTANTS,
    GMEConcepts,
    exporters,
    nodePropertyNames,
    ImportModelDialog,
    ConfirmDialog
) {

    'use strict';

    var ModelManagerControl;

    ModelManagerControl = function (options) {
        var self = this;

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;


        this._territoryId = this._client.addUI(self, function (events) {
            self._eventCallback(events);
        });

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    };

    ModelManagerControl.prototype._initWidgetEventHandlers = function () {
        var self = this;

        this._widget.onInitialized = function (config) {
            self._config = config;

            self._container = self._config.container || '';

            self._selfPatterns = {};
            self._selfPatterns[self._container] = {children: 1};
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        };

        this._widget.onNewModel = function (typeName, typePath) {
            var dialog = new ConfirmDialog();
            dialog.show({
                title: 'New <' + typeName + '>',
                question: 'Give a name for the new model..',
                input: {
                    label: 'Name',
                    placeHolder: 'New ' + typeName,
                    required: true
                },
                severity: 'info'
            }, function (dummy, name) {
                name = name || 'New ' + typeName;
                self._client.createNode({
                        baseId: typePath,
                        parentId: self._container
                    }, {attributes: {name: name}},
                    'Model \'' + name + '\' created by ModelManager');
            });


        };

        this._widget.onImport = function () {
            new ImportModelDialog(self._client, self._logger.fork('ImportModel')).show(self._container);
        };

        this._widget.onExport = function (modelPath) {
            exporters.exportModels(self._client, self._logger, [modelPath], true);
        };

        this._widget.onView = function (modelPath) {
            WebGMEGlobal.State.registerActiveObject(modelPath);
        };

        this._widget.onDelete = function (modelPath) {
            self._client.deleteNode(modelPath, 'Model \'' + self._models[modelPath] + '\' removed by ModelManager');
        };
    };

    ModelManagerControl.prototype._eventCallback = function (/*events*/) {
        var self = this,
            container = this._client.getNode(this._container),
            childrenPaths,
            models = [];

        this._models = [];
        if (container === null) {

            this._widget.updateModelList([]);
            return;
        }

        childrenPaths = container.getChildrenIds();

        childrenPaths.forEach(function (childrenPath) {
            var model = self._client.getNode(childrenPath),
                meta;

            if (model) {
                meta = self._client.getNode(model.getMetaTypeId());
                self._models[childrenPath] = {
                    name: model.getAttribute('name'),
                    type: meta === null ? null : meta.getAttribute('name'),
                    path: childrenPath
                }
                models.push(self._models[childrenPath]);
            }
        });

        self._widget.updateModelList(models);

    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    ModelManagerControl.prototype.destroy = function () {
        // this._detachClientEventListeners();
        // this._removeToolbarItems();
    };

    ModelManagerControl.prototype._attachClientEventListeners = function () {
        // this._detachClientEventListeners();
        // WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    ModelManagerControl.prototype._detachClientEventListeners = function () {
        // WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    ModelManagerControl.prototype.onActivate = function () {
        // this._attachClientEventListeners();
        // this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    ModelManagerControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        // this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    // ModelManagerControl.prototype._displayToolbarItems = function () {
    //
    //     if (this._toolbarInitialized === true) {
    //         for (var i = this._toolbarItems.length; i--;) {
    //             this._toolbarItems[i].show();
    //         }
    //     } else {
    //         this._initializeToolbar();
    //     }
    // };

    // ModelManagerControl.prototype._hideToolbarItems = function () {
    //
    //     if (this._toolbarInitialized === true) {
    //         for (var i = this._toolbarItems.length; i--;) {
    //             this._toolbarItems[i].hide();
    //         }
    //     }
    // };

    // ModelManagerControl.prototype._removeToolbarItems = function () {
    //
    //     if (this._toolbarInitialized === true) {
    //         for (var i = this._toolbarItems.length; i--;) {
    //             this._toolbarItems[i].destroy();
    //         }
    //     }
    // };

    // ModelManagerControl.prototype._initializeToolbar = function () {
    //     var self = this,
    //         toolBar = WebGMEGlobal.Toolbar;
    //
    //     this._toolbarItems = [];
    //
    //     this._toolbarItems.push(toolBar.addSeparator());
    //
    //     /************** Go to hierarchical parent button ****************/
    //     this.$btnModelHierarchyUp = toolBar.addButton({
    //         title: 'Go to parent',
    //         icon: 'glyphicon glyphicon-circle-arrow-up',
    //         clickFn: function (/*data*/) {
    //             WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
    //         }
    //     });
    //     this._toolbarItems.push(this.$btnModelHierarchyUp);
    //     this.$btnModelHierarchyUp.hide();
    //
    //     /************** Checkbox example *******************/
    //
    //     this.$cbShowConnection = toolBar.addCheckBox({
    //         title: 'toggle checkbox',
    //         icon: 'gme icon-gme_diagonal-arrow',
    //         checkChangedFn: function (data, checked) {
    //             self._logger.debug('Checkbox has been clicked!');
    //         }
    //     });
    //     this._toolbarItems.push(this.$cbShowConnection);
    //
    //     this._toolbarInitialized = true;
    // };

    return ModelManagerControl;
});
